// Generated by @schoolai/spicedb-zed-schema-parser
// Do not edit manually.

import { PermissionOperations } from '@schoolai/spicedb-zed-schema-parser';

// --------------- GENERIC TYPES ---------------

export type Subject<T extends string> = `${T}:${string}`;
export type Resource<T extends string> = `${T}:${string}`;

// --------------- RESOURCE TYPES ---------------
export type UserResource = Resource<'user'>;
export type DocumentResource = Resource<'document'>;
export type FolderResource = Resource<'folder'>;

export const permissions = {
  document: {
    grant: {
      owner: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
    },
    check: {
      edit: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.check('edit').subject(subject).resource(resource),
      view: (subject: Subject<'user'>, resource: DocumentResource) => PermissionOperations.check('view').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
    },
  },
  folder: {
    grant: {
      owner: (subject: Subject<'user'>, resource: FolderResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: FolderResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      parent: (subject: Subject<'folder'>, resource: FolderResource) => PermissionOperations.grant('parent').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: FolderResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: FolderResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      parent: (subject: Subject<'folder'>, resource: FolderResource) => PermissionOperations.revoke('parent').subject(subject).resource(resource),
    },
    check: {
      edit: (subject: Subject<'user'>, resource: FolderResource) => PermissionOperations.check('edit').subject(subject).resource(resource),
      view: (subject: Subject<'user'>, resource: FolderResource) => PermissionOperations.check('view').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byParent: (subject: Subject<'folder'>) => PermissionOperations.find().relation('parent').subject(subject),
    },
  },
};

// Generated by @schoolai/spicedb-zed-schema-parser
// Do not edit manually.

import { PermissionOperations } from '@schoolai/spicedb-zed-schema-parser';

// --------------- GENERIC TYPES ---------------

export type Subject<T extends string> = `${T}:${string}`;
export type Resource<T extends string> = `${T}:${string}`;

// --------------- RESOURCE TYPES ---------------
export type UserResource = Resource<'user'>;
export type OrganizationResource = Resource<'organization'>;
export type TeamResource = Resource<'team'>;
export type ObjectiveResource = Resource<'objective'>;
export type KeyResultResource = Resource<'key_result'>;
export type StrategyResource = Resource<'strategy'>;
export type ProcessResource = Resource<'process'>;
export type ProjectResource = Resource<'project'>;
export type TaskResource = Resource<'task'>;

export const permissions = {
  organization: {
    grant: {
      owner: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: OrganizationResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
    },
  },
  team: {
    grant: {
      owner: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      member: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.grant('member').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: TeamResource) => PermissionOperations.grant('organization').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      member: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.revoke('member').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: TeamResource) => PermissionOperations.revoke('organization').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
      memberAccess: (subject: Subject<'user'>, resource: TeamResource) => PermissionOperations.check('member_access').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byMember: (subject: Subject<'user'>) => PermissionOperations.find().relation('member').subject(subject),
      byOrganization: (subject: Subject<'organization'>) => PermissionOperations.find().relation('organization').subject(subject),
    },
  },
  objective: {
    grant: {
      owner: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: ObjectiveResource) => PermissionOperations.grant('organization').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: ObjectiveResource) => PermissionOperations.revoke('organization').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: ObjectiveResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byOrganization: (subject: Subject<'organization'>) => PermissionOperations.find().relation('organization').subject(subject),
    },
  },
  keyResult: {
    grant: {
      owner: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      objective: (subject: Subject<'objective'>, resource: KeyResultResource) => PermissionOperations.grant('objective').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      objective: (subject: Subject<'objective'>, resource: KeyResultResource) => PermissionOperations.revoke('objective').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: KeyResultResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byObjective: (subject: Subject<'objective'>) => PermissionOperations.find().relation('objective').subject(subject),
    },
  },
  strategy: {
    grant: {
      owner: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: StrategyResource) => PermissionOperations.grant('organization').subject(subject).resource(resource),
      keyResult: (subject: Subject<'key_result'>, resource: StrategyResource) => PermissionOperations.grant('key_result').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: StrategyResource) => PermissionOperations.revoke('organization').subject(subject).resource(resource),
      keyResult: (subject: Subject<'key_result'>, resource: StrategyResource) => PermissionOperations.revoke('key_result').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: StrategyResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byOrganization: (subject: Subject<'organization'>) => PermissionOperations.find().relation('organization').subject(subject),
      byKeyResult: (subject: Subject<'key_result'>) => PermissionOperations.find().relation('key_result').subject(subject),
    },
  },
  process: {
    grant: {
      owner: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: ProcessResource) => PermissionOperations.grant('organization').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: ProcessResource) => PermissionOperations.revoke('organization').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: ProcessResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byOrganization: (subject: Subject<'organization'>) => PermissionOperations.find().relation('organization').subject(subject),
    },
  },
  project: {
    grant: {
      owner: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: ProjectResource) => PermissionOperations.grant('organization').subject(subject).resource(resource),
      team: (subject: Subject<'team'>, resource: ProjectResource) => PermissionOperations.grant('team').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      organization: (subject: Subject<'organization'>, resource: ProjectResource) => PermissionOperations.revoke('organization').subject(subject).resource(resource),
      team: (subject: Subject<'team'>, resource: ProjectResource) => PermissionOperations.revoke('team').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: ProjectResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byOrganization: (subject: Subject<'organization'>) => PermissionOperations.find().relation('organization').subject(subject),
      byTeam: (subject: Subject<'team'>) => PermissionOperations.find().relation('team').subject(subject),
    },
  },
  task: {
    grant: {
      owner: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.grant('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.grant('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.grant('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.grant('viewer').subject(subject).resource(resource),
      project: (subject: Subject<'project'>, resource: TaskResource) => PermissionOperations.grant('project').subject(subject).resource(resource),
    },
    revoke: {
      owner: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.revoke('owner').subject(subject).resource(resource),
      admin: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.revoke('admin').subject(subject).resource(resource),
      editor: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.revoke('editor').subject(subject).resource(resource),
      viewer: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.revoke('viewer').subject(subject).resource(resource),
      project: (subject: Subject<'project'>, resource: TaskResource) => PermissionOperations.revoke('project').subject(subject).resource(resource),
    },
    check: {
      create: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.check('create').subject(subject).resource(resource),
      read: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.check('read').subject(subject).resource(resource),
      update: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.check('update').subject(subject).resource(resource),
      delete: (subject: Subject<'user'>, resource: TaskResource) => PermissionOperations.check('delete').subject(subject).resource(resource),
    },
    find: {
      byOwner: (subject: Subject<'user'>) => PermissionOperations.find().relation('owner').subject(subject),
      byAdmin: (subject: Subject<'user'>) => PermissionOperations.find().relation('admin').subject(subject),
      byEditor: (subject: Subject<'user'>) => PermissionOperations.find().relation('editor').subject(subject),
      byViewer: (subject: Subject<'user'>) => PermissionOperations.find().relation('viewer').subject(subject),
      byProject: (subject: Subject<'project'>) => PermissionOperations.find().relation('project').subject(subject),
    },
  },
};
